---
title: "eds223-week4-lab"
subtitle: "Basics of raster operations with `terra`"
format: html
---

[Link to lab](https://eds-223-geospatial.github.io/course-materials/labs/week4.html)

## Set Up

```{r}
library(terra)
library(tidyverse)
library(tmap)
library(kableExtra)
library(spData)
library(spDataLarge)
library(geodata)
```

## Raster Objects

### Creating raster objects

The `terra` package represents raster objects using the `SpatRaster` class.

```{r}
# create raster objects 
zion_elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))
zion_land <- rast(system.file("raster/nlcd.tif", package = "spDataLarge"))

```

#### Make a map

```{r}
tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)")

tm_shape(zion_land)+
  tm_raster(title = "Land cover")
```

You can get more info about the raster data by running in the console: `summary(zion_elevation)` or `zion_elevation`.

You get info about - Dimensions (rows, columns, how many layers) - CRS

Lets look at some raster data with multiple layers

```{r}
# Load in dataset containing the four bands of the Landsat 8 image
landsat <- rast(system.file("raster/landsat.tif", package = "spDataLarge"))

nlyr(landsat) # test number of layers in raster object
```

Visualize it

```{r}
tm_shape(landsat) +
  tm_raster()
```

### Subset layers

```{r}
# subset by layer number 
landsat3 <- subset(landsat, 3)

# subset by layer name
landsat4 <- subset(landsat, "landsat_4")
```

### Exploring raster data

Gives you some more info about your raster data

```{r}
global(zion_elevation, mean) # mean of the raster 
freq(zion_land) # Frequency table of the values of a SpatRaster
```

## Indexing

```{r}
# first row
zion_elevation[1, 1]
zion_elevation[1]

# first row of all four layers 
landsat[1]
```

Can also use the index to update their value

```         
raster[1,1] <- 0

landsat[1] <- 0 # This would update the first row of all four layers

zion_elevation[zio_elevation < 20] <- NA # Based on value make NA
```

## Spatial Subsetting

We can move from subsetting based on specific cell IDs to extract info based on spatial objects.

To use coordinates for subsetting, we can “translate” coordinates into a cell ID with the functions `terra::cellFromXY()` or `terra::extract()`.

```{r}
# create point within area covered by raster
point <- matrix(c(-113, 37.5), ncol = 2)

# approach 1
# find cell ID for point
id <- cellFromXY(zion_elevation, xy = point)
# index to cell
zion_elevation[id]

# approach 2
# extract raster values at point
terra::extract(zion_elevation, point)
```

We can also subset raster objects based on the extent another raster object. Here we extract the values of our elevation raster that fall within the extent of a clipping raster that we create.

#### Clipping

```{r}
# create a raster with a smaller extent
clip <- rast(xmin = -113.3, xmax = -113, ymin = 37.2, ymax = 37.9,
            resolution = 0.3,
            vals = 1)

# select values that fall within smaller extent
zion_elevation_clip <- zion_elevation[clip, drop = FALSE]
```

Without `drop = FALSE` in the above clipping function, it would have made `zion_elevation_clip` into a data frame. This maintains it in that SpatRaster class

We can do a check

```{r}
# verify that output has fewer values than original
if(ncell(zion_elevation) == nrow(zion_elevation_clip)) {
  warning("clipping did not remove cells")
} else {
  print("clipping removed cells")
}
```

```{r}
# map 1 before clipping 
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

# map 2 after clipping 
map2 <- tm_shape(zion_elevation_clip) +
  tm_raster(title = "Elevation (m)") +
    tm_layout(main.title = "clipped")


tmap_arrange(map1, map2, nrow = 1)  
```

#### Masking

```{r}
# create mask 
rmask <- zion_elevation
rmask[rmask < 2000] <- NA 

# bracket subsetting 
masked1<- zion_elevation[rmask, drop = FALSE]

# using mask()
masked2 <- terra::mask(zion_elevation, rmask) # what we want to mask, how to mask 
```

Map what we just did

```{r}
map1 <- tm_shape(zion_elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "original")

map2 <- tm_shape(masked1) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "bracket subsetting")

map3 <- tm_shape(masked2) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "mask()")

map1
map2
map3
```

Now, we only have values that are greater than 2000 meters


## Map alegbra

### Local operations 
We can use ordinary arithmetic or logical statements

```{r}
zion_elevation + zion_elevation # doubles each cells' value
zion_elevation^2 # raises each cells' value to the power of 2
log(zion_elevation) # takes the log of each cells' value
zion_elevation > 5 # determines whether each cell has a value greater than 5
```

We can also reclassify cells.

Ex. Turn elevation into 'low', 'medium' and 'high' categorization.

```{r}
# create a matrix of reclassification 
rcl <- matrix(c(1000, 1500, 1,
                1500, 2000, 2,
                2000, 2500, 3, 
                2500, 3000, 4),
              ncol = 3, byrow = TRUE)

# use matrix to reclassify elevation raster 
reclassified <- classify(zion_elevation, rcl = rcl)

# change values into factors 
values(reclassified) <- as.factor(values(reclassified))
```

Let's look at this in a map

```{r}
tm_shape(reclassified) +
  tm_raster()
```

For more efficient processing, we can use a set of map algebra functions:

-   `app()` applies a function to each cell of a raster to summarize the values of multiple layers into one layer
-   `tapp()` is an extension of app() that allows us to apply on operation on a subset of layers
-   `lapp()` allows us to apply a function to each cell using layers as arguments

We can use the `lapp()` function to compute the Normalized Difference Vegetation Index (NDVI). (More on this later in the quarter!) Let’s calculate NDVI for Zion National Park using multispectral satellite data.

First, we need to define a function to calculate NDVI. Then, we can use `lapp()` to calculate NDVI in each raster cell. To do so, we just need the NIR and red bands.

```{r}
# define NDVI as the normalized difference between NIR and red bands
ndvi_fun <- function(nir, red){
  (nir - red)/(nir + red)
}


# apply NDVI function to Landsat bands 3 and 4 
# 4 is nir 
# 3 is red 
ndvi_rast <- lapp(landsat[[c(4,3)]], fun = ndvi_fun)

# map it 
tm_shape(ndvi_rast) +
  tm_raster()
```

### Focal Operations 

We can use the `focal()` function to perform spatial filtering. We define the size, shape, and weights of the moving window using a matrix. In the following example we’ll find the minimum value in 9x9 cell neighborhoods.



```{r}
# w = matrix is the moving window
# fun =  function to map new values
elevation_focal <- focal(zion_elevation,
                         w = matrix(1, nrow = 9, ncol = 9),
                         fun = min)
```

```{r}
# map it 
tm_shape(elevation_focal) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")
```

### Zonal Operations 

```{r}
terra::zonal(zion_elevation, reclassified, fun = mean)
```

This gives us the mean value in each group. It gives us a summary table. Could use kable to make this info look nicer.

Example: 
```{r}
zonal(zion_elevation, reclassified, fun = "mean") %>%
  kable(col.names = c("Elevation zone", "Mean elevation (m)")) %>% 
  kable_styling(bootstrap_options = "striped")
```


### Global 

Applies across entire raster 
```{r}
global(zion_elevation, mean) # mean of the raster 
```


# Global Operations 

### Changing the extent 

Performing algebraic operations on objects with different extents doesn’t work.

We can align the extent of the 2 rasters using the `extend()` function. Here we extend the zion_elevation object to the extent of elev_2 by adding NAs.

```{r}
# extending our raster,add num of row and columns
extend <- terra::extend(zion_elevation, c(1, 200))

extend2 <- terra::extend(zion_elevation, extend)
```

Now we could preform operations 
```{r}
extend + extend2
```


### Orgin 

The origin function returns the coordinates of the cell corner closes to the coordinates (0,0).

```{r}
origin(zion_elevation)
```


### Resolution 

To match resolutions we can decrease (or coarsen) the resolution by aggregating or increase (or sharpen) the resolution by disaggregating.

#### Aggregate 
```{r}
zion_elevation_coarse <- aggregate(zion_elevation, fact = 5, fun = mean)
```


Map it 
```{r}
tm_shape(zion_elevation_coarse) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "aggregated")
```

#### Disaggregate 
```{r}
zion_elevation_disagg <- terra::disagg(zion_elevation_coarse,
                                       fact = 5, 
                                       method = "bilinear")
```

Check whether the disaggregated version matches the original

```{r}
if(identical(zion_elevation, zion_elevation_disagg)){
  print("disaggregated data matches original")
} else {
  warning("disaggregated data does not match original")
}
```

They don't fully match. Once the raster is aggregated or made simplier, it is impossible to get back to the orginial, as the disaggration will only be an estimation. 


### Resampling 

In most cases, the target raster would be an object you are already working with, but here we define a target raster.

```{r}
# create a target raster 
target_rast <- rast(xmin = -113.2, xmax = -112.9,
                   ymin = 37.14, ymax = 37.5,
                   nrow = 450, ncol = 460, 
                   crs = crs(zion_elevation))

# now resample zion_elevation into this target 
zion_elevation_resample <- terra::resample(zion_elevation, y = target_rast, method = "bilinear")
```


Map the resample 
```{r}
map4 <- tm_shape(zion_elevation_resample) +
  tm_raster(title = "Elevation (m)") +
  tm_layout(main.title = "resampled")

tmap_arrange(map1, map4, nrow = 1) 
```

Looks really similar, but it is slightly different. 